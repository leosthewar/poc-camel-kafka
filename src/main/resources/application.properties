server.port: ${random.int(5000,5100)}

camel.component.kafka.brokers=${AMQS_BROKER}

#Autenticacion por SASL_SSL PLAIN
#camel.component.kafka.security-protocol=SASL_SSL
#camel.component.kafka.sasl-mechanism=PLAIN
#camel.component.kafka.sasl-jaas-config=org.apache.kafka.common.security.plain.PlainLoginModule required username="srvc-acct-0da24df9-324b-45a2-aef0-48e10cb5652c" password="2cee9b5c-4d19-4288-aecc-e72b947f501e";

#Autenticacion por SASL_SSL OAUTHBEARER
camel.component.kafka.security-protocol=SASL_SSL
camel.component.kafka.sasl-mechanism=OAUTHBEARER
camel.component.kafka.sasl-jaas-config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
  oauth.client.id="${AMQS_OAUTH_CLIENT_ID}" \
  oauth.client.secret="${AMQS_OAUTH_CLIENT_SECRET}" \
  oauth.token.endpoint.uri="${AMQS_OAUTH_TOKEN_URI}" ;
 camel.component.kafka.additional-properties[sasl.login.callback.handler.class]=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler


#Autenticacion por TLS type PKCS12
#Autenticacion por TLS por defecto es JKS, en ese caso no se tendria que colocar las propiedades para type
#camel.component.kafka.security-protocol=SSL
#camel.component.kafka.ssl-keystore-location=src/main/resources/user.p12
#camel.component.kafka.ssl-keystore-password=UDyjsaAt6i2l
#camel.component.kafka.ssl-keystore-type=PKCS12
#camel.component.kafka.ssl-truststore-location=src/main/resources/ca.p12
#camel.component.kafka.ssl-truststore-password=xRYwfryTVeRv
#camel.component.kafka.ssl-truststore-type=PKCS12
#camel.component.kafka.ssl-protocol=TLS
#camel.component.kafka.ssl-enabled-protocols=TLSv1.2,TLSv1.1,TLSv1


AMQS_BROKER=kafka-demo-ca-pe-t-d-cv--s--v-g.bf2.kafka.rhcloud.com:443
AMQS_OAUTH_CLIENT_ID=srvc-acct-fc492367-d1a4-43b8-a941-4e1d89fb2b25
AMQS_OAUTH_CLIENT_SECRET=49d3831a-0027-41f0-ad93-ceb71082681f
AMQS_OAUTH_TOKEN_URI=https://identity.api.openshift.com/auth/realms/rhoas/protocol/openid-connect/token